#!/bin/bash
#
# Developed by Michael Metz 12/18/2017
#
# ------------------------------------------------------------------------------
#
# MIT License
#
# Copyright (c) 2017 MIchael Metz
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE
#
# ------------------------------------------------------------------------------
#
####
#
# USAGE: zeropad [-p prepend-text] [-a append-text] [num-digits]
#
# |FLAGS|
# [-p prepend-text] : text to add before the zeropadded number.
# [-a append-text]  : text to add after the zeropadded number. 
#                     Typically the extension of the file. ex. -a .jpg
#
# |ARGUMENTS|
# [num-digits] : how many digits places the number should use. Integer value 0 < v < 16.
#
# CAUTION: zeropad loops through directory files alphabetically.
#          Thus renaming the files in alphabetical order. Therefore be careful
#          if you want your sequence to have a particular order in the end.
#
#
######
#
#stats
starttime=$(date +%s)

#validate arguments
usage()
{
  echo "------------------------------------------------------------"
  echo "USAGE: zeropad [-p prepend-text] [-a append-text] [num-digits]"
  echo ""
  echo "|FLAGS|
  echo "[-p prepend-text] : text to add before the zeropadded number."
  echo "[-a append-text]  : text to add after the zeropadded number."
  echo "                     Typically the extension of the file. ex. -a .jpg"
  echo """
  echo "|ARGUMENTS|"
  echo "[num-digits] : how many digits places the number should use. Integer value 0 < v < 16."
  echo ""
  echo "CAUTION: zeropad loops through directory files alphabetically."
  echo "         Thus renaming the files in alphabetical order. Therefore be careful"
  echo "         if you want your sequence to have a particular order in the end."
  echo ""
  echo ""
  exit 0
}

prependText=""
appendText=""
#make sure there is five arguments
if [ $# -eq 0 ]
	then
    usage ""
elif [ $# -gt 7 ]
	then
	  usage "You inputted $# arguments. At most 7 can be used"
else
	while [ $# -gt 0 ]
		do
			# get parameter values
			case "$1" in
		  -h|-help)    # help information
					   usage ""
					   ;;
				-p)    # center
					   shift  # to get the next parameter
					   prependText="$1"
					   ;;
			   	-a)    # units
					   shift  # to get the next parameter
					   appendText="$1"
					   ;;

				 -)    # STDIN and end of arguments
					   break
					   ;;
				-*)    # any other - argument
					   usage "$1 is an Invalid flag"
					   ;;
		     	 *)    # end of arguments
					   break
					   ;;
			esac
			shift   # next option
	done
	#
	# get infile and outfile
	numDigits="$1"
fi

#validate number of zeros
case ${numDigits#[-+]} in
  *[!0-9]* | '') usage  "num-digits must be an integer" ;;
  *) if [ "$numDigits" -le 0 ] || [ "$numDigits" -gt 16 ]; then
      usage  "num-digits $numDigits is not valid.  Must be an integer greater than 0 and less/equal then 16"
  fi ;;
esac


#Count how files we need to rename
numFiles=$((0))
for file in *; do
  numFiles=$((numFiles+1))
done

#check if we can represent all the files with the desired zeropadded digits
filesWeCanForm=$((10 ** numDigits))
if [ "$numFiles" -gt "$filesWeCanForm" ]; then
  usage "with $numDigits digit we can name $filesWeCanForm files. This folder contains $numFiles. try increasing the number of zeros"
fi

#generate a zeropad number for each file and rename it
counter=$((0))
for file in *;do
  formatString="%0$numDigits"
  d="d"
  formatString="$formatString$d"
  printf -v number "$formatString" $counter

  mv "$file" "$prependText$number$appendText"
  counter=$((counter+1))
done



#output stats
endtime=`date +%s`

echo "renamed $fileCount in $((endtime - starttime)) seconds"
